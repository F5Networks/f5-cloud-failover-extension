image: node:8

stages:
    - check_content
    - build_package
    - test
    - test_functional_init
    - test_functional_execute
    - test_functional_cleanup
    - build_api_docs_and_postman_collection
    - build_docs
    - publish

.helpers: &helpers |
    function validate () {
        "$@"
        if [[ $? -ne 0 ]]; then exit 1; fi
    }

before_script:
    - *helpers

variables:
    TERRAFORM_PKG_URL: 'https://releases.hashicorp.com/terraform/0.12.6/terraform_0.12.6_linux_386.zip'
    GIT_SECRETS_VERSION: '1.3.0'
    GIT_SECRETS_PKG_URL: "https://github.com/awslabs/git-secrets/archive/${GIT_SECRETS_VERSION}.tar.gz"
    ARTIFACTORY_SERVER: "$ARTIFACTORY_SERVER"
    DOCS_BUILD_DIR: "docs/_build/html"
    POSTMAN_EXAMPLES: 'postman-collection'
    # azure vars - normalize env var options between ansible and terraform
    AZURE_TENANT: "$AZURE_TENANT_ID"
    AZURE_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_CLIENT_ID: "$AZURE_CLIENT_ID"
    ARM_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_SUBSCRIPTION_ID: "$AZURE_SUBSCRIPTION_ID"
    ARM_TENANT_ID: "$AZURE_TENANT_ID"
    # aws vars
    AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
    # gcp vars
    GOOGLE_CREDENTIALS: "$GOOGLE_CREDENTIALS"
    GOOGLE_PROJECT_ID: "$GOOGLE_PROJECT_ID"
    # debug vars
    F5_SDK_LOG_LEVEL: "INFO"
    PYTHONWARNINGS: 'ignore:Unverified HTTPS request'
    # topology var
    CF_ENV_NETWORK_TOPOLOGY: 'same_network'
    CF_ENV_NIC_COUNT: 3

# check for disallowed content within any file in source control, this
# supplements the native pre-receive push rules built into GitLab for secrets
# note: .gitallowed is used for exceptions
check_content:
    image: f5devcentral/containthedocs:rpmbuild
    stage: check_content
    script:
        # install git-secrets
        - curl -q -L -o git_secrets.tar.gz ${GIT_SECRETS_PKG_URL}
        - tar xzf git_secrets.tar.gz
        - cd git-secrets-${GIT_SECRETS_VERSION} && make install && cd ..
        # now, add any patterns to disallow
        - git secrets --add '.*f5.*\.com'
        # scan
        - git secrets --scan
    tags:
        - cm-official-docker-executor

build_package:
    image: f5devcentral/containthedocs:rpmbuild
    stage: build_package
    script:
        - echo 'CI BUILD'
        # install packages: jq
        - apt-get update
        - apt-get install -y jq
        # build RPM, handles dependency installation, etc.
        - bash ./scripts/build_rpm.sh
    tags:
        - cm-official-docker-executor
    artifacts:
        name: f5-cloud-failover-$CI_BUILD_REF
        paths:
            - dist
        expire_in: 1 month

# test package against node 4.x
test_node4:
    stage: test
    image: node:4
    script:
        - npm install --global npm@5.10.0
        - npm install mocha@5.2.0
        - npm install nyc@14.0.0
        - npm install --no-optional
        - npm run test-only-node-4
    tags:
        - docker-executor

# test package
test_package:
    stage: test
    script:
        - apt-get update && apt-get install -y jq && npm install
        # linter
        - npm run lint
        # unit tests
        - npm run test
    tags:
        - cm-official-docker-executor

# audit packages for vulnerabilities
test_audit:
    stage: test
    script:
        - apt-get update && apt-get install -y jq && npm install
        # npm audit - install includes audit, but perform specific check and fail if needed
        - audit_report=$(npm audit --json)
        - echo $audit_report
        - actions=$(echo $audit_report | jq .actions | jq length)
        - if [ $actions -ne 0 ]; then echo 'ERROR! vulnerabilities exist'; exit 1; fi
    tags:
        - cm-official-docker-executor

# job must be called coverage
coverage:
    stage: test
    script:
        - apt-get update && apt-get install -y jq && npm install
        # unit tests + coverage report
        - npm run test && npm run check && npm run report
    tags:
        - cm-official-docker-executor
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_coverage
        paths:
            - coverage
        expire_in: 1 month

### Functional Tests Section

# Functional Tests - Initialization phase (with 1 retries in a case of any failures)
.test_functional_init_generic: &test_functional_init_generic
    stage: test_functional_init
    image: python:3.7
    retry:
        max: 1
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install terraform
        - curl ${TERRAFORM_PKG_URL} -o terraform.zip -vvv && unzip terraform.zip && export PATH="$PATH:$(pwd)"
        # install node (and package dependencies)
        - curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get -y install nodejs
        - npm install
        # setup environment
        - set -e
        - validate npm run deployment-create
        
        - mkdir -p env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}
        - chmod -R +wr env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}
        - cp deployment_info.json env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}
        - cp *.tfstate env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}
    tags:
        - cm-official-docker-executor
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "master"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/
    artifacts:
        paths:
            - env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}
        when: always
        expire_in: 1 month

# run functional tests: azure
test_functional_init_azure:
    <<: *test_functional_init_generic
    variables:
        CF_ENV_CLOUD: "azure"

# run functional tests: azure - 1nic
test_functional_init_azure_1nic:
    <<: *test_functional_init_generic
    variables:
        CF_ENV_CLOUD: "azure"
        CF_ENV_NIC_COUNT: 1

# run functional tests: aws - across network topology
test_functional_init_aws_across_net:
    <<: *test_functional_init_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_NETWORK_TOPOLOGY: "across_network"

# run functional tests: aws - same network topology
test_functional_init_aws:
    <<: *test_functional_init_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_USE_AVAILABILITY_ZONES: "false"

# run functional tests: gcp
test_functional_init_gcp:
    <<: *test_functional_init_generic
    variables:
        CF_ENV_CLOUD: "gcp"

# Functional Tests - Execute phase (with no retries)
.test_functional_execute_generic: &test_functional_execute_generic
    stage: test_functional_execute
    image: python:3.7
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install node (and package dependencies)
        - curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get -y install nodejs
        - npm install
        # copying artifacts inherited from functional_test_init target to root directory
        - cp -a env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}/. .
        # executing fuctional test
        - validate npm run test-functional
        # run API smoke tests
        - validate npm run validate-api
    tags:
        - cm-official-docker-executor
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "master"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/

# run functional tests: azure
test_functional_execute_azure:
    <<: *test_functional_execute_generic
    variables:
        CF_ENV_CLOUD: "azure"
    dependencies:
        - test_functional_init_azure
        - build_package

# run functional tests: azure
test_functional_execute_azure_1nic:
    <<: *test_functional_execute_generic
    variables:
        CF_ENV_CLOUD: "azure"
        CF_ENV_NIC_COUNT: 1
    dependencies:
        - test_functional_init_azure_1nic
        - build_package

# run functional tests: aws - across network topology
test_functional_execute_aws_across_net:
    <<: *test_functional_execute_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_NETWORK_TOPOLOGY: "across_network"
    dependencies:
        - test_functional_init_aws_across_net
        - build_package

# run functional tests: aws - same network topology
test_functional_execute_aws:
    <<: *test_functional_execute_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_USE_AVAILABILITY_ZONES: "false"
    dependencies:
        - test_functional_init_aws
        - build_package

# run functional tests: gcp
test_functional_execute_gcp:
    <<: *test_functional_execute_generic
    variables:
        CF_ENV_CLOUD: "gcp"
    dependencies:
        - test_functional_init_gcp
        - build_package

# Functional Tests - Cleanup phase (executes always with 1 retry in a case of any failures)
.test_functional_cleanup_generic: &test_functional_cleanup_generic
    stage: test_functional_cleanup
    image: python:3.7
    retry:
        max: 1
    when: always
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install terraform
        - curl ${TERRAFORM_PKG_URL} -o terraform.zip -vvv && unzip terraform.zip && export PATH="$PATH:$(pwd)"
        # install node (and package dependencies)
        - curl -sL https://deb.nodesource.com/setup_10.x | bash - && apt-get -y install nodejs
        - npm install
        # copying artifacts inherited from functional_test_init target to root directory
        - cp -a env_metadata/${CF_ENV_CLOUD}_${CF_ENV_NETWORK_TOPOLOGY}_${CF_ENV_NIC_COUNT}/. .
        # teardown environment
        - validate npm run deployment-delete
    tags:
        - cm-official-docker-executor
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "master"
            - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/

# run functional tests: azure
test_functional_cleanup_azure:
    <<: *test_functional_cleanup_generic
    variables:
        CF_ENV_CLOUD: "azure"
    dependencies:
        - test_functional_init_azure

# run functional tests: azure_1nic
test_functional_cleanup_azure_1nic:
    <<: *test_functional_cleanup_generic
    variables:
        CF_ENV_CLOUD: "azure"
        CF_ENV_NIC_COUNT: 1
    dependencies:
        - test_functional_init_azure_1nic

# run functional tests: aws - across network topology
test_functional_cleanup_aws_across_net:
    <<: *test_functional_cleanup_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_NETWORK_TOPOLOGY: "across_network"
    dependencies:
        - test_functional_init_aws_across_net

# run functional tests: aws - same network topology
test_functional_cleanup_aws:
    <<: *test_functional_cleanup_generic
    variables:
        CF_ENV_CLOUD: "aws"
        CF_ENV_USE_AVAILABILITY_ZONES: "false"
    dependencies:
        - test_functional_init_aws

# run functional tests: gcp
test_functional_cleanup_gcp:
    <<: *test_functional_cleanup_generic
    variables:
        CF_ENV_CLOUD: "gcp"
    dependencies:
        - test_functional_init_gcp

###  End of Functional Tests

build_api_docs:
    stage: build_api_docs_and_postman_collection
    script:
        # install packages
        - npm install
        # generate docs
        - npm run make-api-docs
        - mkdir apidocs && mv redoc-static.html apidocs/index.html
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - apidocs
        expire_in: 1 month

build_postman_collection:
    stage: build_api_docs_and_postman_collection
    script:
        # install packages
        - npm install
        # generate postman-collection
        - npm run make-postman-collection
    tags:
        - docker-executor
    artifacts:
        name: ${POSTMAN_EXAMPLES}
        paths:
            - examples
        expire_in: 1 month

build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build_docs
    script:
        # generate docs
        - if [ "$CI_COMMIT_REF_NAME" = "docs-staging" ] || [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
        -   rm -rf docs/_templates
        - fi
        - make html
        # overwrite apidocs html in generated docs folder
        - API_DOCS_INDEX=${DOCS_BUILD_DIR}/userguide/apidocs.html
        - cp apidocs/index.html ${API_DOCS_INDEX}
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - ${DOCS_BUILD_DIR}
        expire_in: 1 month

publish_dev_to_artifactory:
    stage: publish
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "develop"
    tags:
        - cm-official-docker-executor
    script:
        - RPM_FILE=$(ls dist/new_build/*.rpm)
        - RPM_NAME=$(basename $RPM_FILE)
        - URL=${ARTIFACTORY_BASE_URL}/ecosystems-f5-cloud-failover-rpm/develop-${RPM_NAME}
        - echo "Uploading RPM"
        - >-
            UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_BEARER_TOKEN}" -X PUT --data-binary @${RPM_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT
        - POSTMAN_COLLECTION_FILE=$(ls examples/postmanCollection.json)
        - URL=${ARTIFACTORY_BASE_URL}/ecosystems-f5-cloud-failover-rpm/develop-${POSTMAN_EXAMPLES}
        - echo "Uploading Postman Collection and Examples"
        - >-
            UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_BEARER_TOKEN}" -X PUT --data-binary @${POSTMAN_COLLECTION_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT

publish_release_to_artifactory:
    stage: publish
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "master"
    tags:
        - cm-official-docker-executor
    script:
        - RPM_FILE=$(ls dist/new_build/*.rpm)
        - RPM_NAME=$(basename $RPM_FILE)
        - URL=${ARTIFACTORY_BASE_URL}/ecosystems-f5-cloud-failover-rpm/${RPM_NAME}
        - >-
            UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_BEARER_TOKEN}" -X PUT --data-binary @${RPM_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT

# publish docs to internal pages: - this job MUST be named 'pages'
pages:
    stage: publish
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        #### place public facing docs under: /public-docs ####
        - PUBLIC_DOCS=${PUBLIC_DIR}/public-docs
        - mkdir -p ${PUBLIC_DOCS}
        - cp -R ${DOCS_BUILD_DIR}/* ${PUBLIC_DOCS}
        #### place API docs under: /api-docs ####
        - API_DOCS=${PUBLIC_DIR}/api-docs
        - mkdir -p ${API_DOCS}
        - cp -R apidocs/* ${API_DOCS}
        #### place code coverage docs under: /coverage-docs ####
        - COVERAGE_DOCS=${PUBLIC_DIR}/coverage
        - mkdir -p ${COVERAGE_DOCS}
        - cp -R coverage/* ${COVERAGE_DOCS}
        #### place code contribution docs (mainly for presentation) under: /contribute-docs ####
        - CONTRIBUTE_DOCS=${PUBLIC_DIR}/contribute-docs
        - CONTRIBUTE_DIR=contributing
        # install presentation site dependencies
        - cd ${CONTRIBUTE_DIR} && npm install && cd ..
        - mkdir -p ${CONTRIBUTE_DOCS}
        - cp -R ${CONTRIBUTE_DIR}/* ${CONTRIBUTE_DOCS}
        # make relative links absolute - this could be better...
        # ![diagram](../test/README.md) -> ![diagram](https://base.url/../test/README.md)
        - BASE_URL_FOR_LINKS=${CI_PROJECT_URL}/tree/${CI_COMMIT_REF_NAME}/${CONTRIBUTE_DIR}/
        - README=${CONTRIBUTE_DOCS}/README.md
        # make absolute URL(s) for relative URL(s) outside current directory '../'
        - sed -i -E 's/\[.*\]\(\.\./&SED_TEMP/' ${README} && sed -i "s|..SED_TEMP|${BASE_URL_FOR_LINKS}..|" ${README}
    tags:
        - cm-official-docker-executor
    artifacts:
        paths:
            - public
        expire_in: 1 month
    only:
        - develop
        - docs_staging

# Publish docs to clouddocs.f5networks.com
docs to staging:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: stage
        url: https://clouddocs.f5networks.net/products/extensions/f5-cloud-failover/latest
    only:
        variables:
            # Currently will only deploy to clouddocs.f5networks.com on commits to develop branch
            - $CI_COMMIT_REF_NAME == "develop"
            - $CI_COMMIT_REF_NAME == "docs_staging"
    tags:
        - cm-official-docker-executor
    dependencies:
        - build_docs
    script:
        - aws configure set aws_access_key_id $DOCS_AWS_ACCESS_KEY_ID --profile=docs
        - aws configure set aws_secret_access_key $DOCS_AWS_SECRET_ACCESS_KEY --profile=docs
        # Uncomment and set to create desired version format
        - aws s3 sync ${DOCS_BUILD_DIR} s3://clouddocs.f5networks.net/products/extensions/f5-cloud-failover/latest --profile=docs
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST_STAGE --paths /products/extensions/f5-cloud-failover/latest --profile=docs

# Publish docs to clouddocs.f5.com
docs to production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-cloud-failover/latest
    only:
        variables:
            # Currently will only deploy to clouddocs.f5.com on commits to master and docs_production branch
            # note: master should be added here when ready to publish externally
            - $CI_COMMIT_REF_NAME == "master"
            - $CI_COMMIT_REF_NAME == "docs_production"
    tags:
        - cm-official-docker-executor
    dependencies:
        - build_docs
    script:
        - aws configure set aws_access_key_id $DOCS_AWS_ACCESS_KEY_ID --profile=docs
        - aws configure set aws_secret_access_key $DOCS_AWS_SECRET_ACCESS_KEY --profile=docs
        # Uncomment and set to create desired version format
        - aws s3 sync ${DOCS_BUILD_DIR} s3://clouddocs.f5.com/products/extensions/f5-cloud-failover/latest --profile=docs
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-cloud-failover/latest --profile=docs

